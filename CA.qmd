---
title: "Correspondence analysis (CA)"
params:
  colsite: "burlywood4"
  colspp: "cornflowerblue"
---

```{r, results='hide', message=FALSE}
#| code-fold: true

# Paths
library(here)

# Multivariate analysis
library(ade4)
library(adegraphics)

# Matrix algebra
library(expm)

# Plots
library(gridExtra)
source(here("functions/plot.R"))
```

*The contents of this page relies heavily on [@legendre2012].*

## Introduction

Correspondence analysis (CA) was developed independently by several authors between the 1930s and 1960s. It has been mainly applied to analysis of *ecological data tables* (species $\times$ environment) such as the bat data we will analyze here.

Notably, Hill discovered it in 1973 with an iterative method that he called reciprocal averaging. It involves ordering species with sites initially positioned randomly, reciprocally order sites with species, etc. This iterative procedure converges to reach the same results as what is achieved with CA's first axis.

CA is designed to analyze contingency tables (count tables) such $Y$:

```{r, echo = FALSE, message = FALSE}
dat <- readRDS(here("data/Barbaro2012.rds"))
Y <- dat$comm

r <- dim(Y)[1]
c <- dim(Y)[2]

plotmat(r = r, c = c)
```

Here is a preview of $Y$ with our example dataset:

```{r, echo = FALSE, message = FALSE}
knitr::kable(Y)
```

```{r}
(r <- dim(Y)[1])
(c <- dim(Y)[2])
```

This table represents the abundance of different bird species (columns) at different sites (rows) in New Zealand.

More generally CA, can be used to analyze tables which are dimensionnally homogeneous and contain no negative values.

CA preserves $\chi^2$ distances $D$ between rows and columns of the contingency table:

$$
D(x_1, x_2) = \sqrt{\sum_{j = 1}^p \frac{1}{y_{\cdot j}/y_{\cdot \cdot}}\left(\frac{y_{1j}}{y_{1\cdot}} -  \frac{y_{2j}}{y_{2\cdot}}\right)^2}
$$

Where $x_1$ and $x_2$ represent two items of the rows/columns. $p$ is the number of rows (if $x_1$ and $x_2$ are items of columns) or columns else.

$y_{\cdot j}$ represent either:

-   if $x_1$ and $x_2$ are items of the columns: the sum of the $j$-th row. For a species x environment table, it is the total number of individuals in the $j$-th site.
-   if $x_1$ and $x_2$ are items of the rows: the sum of the $j$-th column. For a species x environment table, it is the total number of individuals of the $j$-th species.

$y_{\cdot \cdot}$ is the sum of all individuals of the table.

$\frac{y_{1j}}{y_{1\cdot}}$ are relative frequencies of individuals per rows (if $x_1$ and $x_2$ are items of the rows) or columns.

For example, we compute the $\chi^2$ distance between `sp1` and `sp2`:

```{r}
# Get how much each site contributed to the total count of species
freq <- apply(Y, 2, FUN = function(x) x/sum(x))

# Get total number of individuals of bats in all sites
(ytot <- sum(Y))

sqrt( sum(1/(rowSums(Y)/ytot)*(freq[, "sp1"] - freq[, "sp2"])^2 ) )
```

And between sites `1` and `2`:

```{r}
# Get the relative composition of species for each site
freq <- t(apply(Y, 1, FUN = function(x) x/sum(x)))

sqrt( sum(1/(colSums(Y)/ytot)*(freq["1",] - freq["2", ])^2 ) )
```

## Computation

::: {.callout-tip title="*TL;DR*"}
Given a data matrix $Y$, we "center-scale" this matrix ($\bar{Q}$).

We can perform the SVD of $\bar{Q}$:

$$
\hat{Q} = \hat{U} \Delta U'
$$

$U$ ($c \times c$) contains the loadings of the columns (species) of the contingency table.

$\hat{U}$ ($r \times c$) contains the loadings of the rows (sites) of the contingency table.

There are $\min(c-1, r-1)$ non-null eigenvalues. The CA eigenvalues are the squares of the SVD eigenvalues: $\Lambda = \Delta^2$.

Also, there is a link between $\hat{U}$ and $U$: 
$$
\hat{U} = \bar{Q}U\Lambda^{-1/2}
$$ 

and 

$$
U = \bar{Q}'\hat{U}\Lambda^{-1/2}
$$
:::

### Transform the table

We transform values of the contingency table $Y$ with counts $f_{ij}$ into proportions $p_{ij}$:

$$
P = Y/f_{\cdot \cdot}
$$

With our example data:

```{r}
P <- Y/sum(Y)
```

Then we transform values of this table into a quantity related to $\chi^2$ values $\bar{Q}$:

$$
\bar{Q} = [\bar{q}_{ij}] = \left[ \frac{p_{ij} - p_{i\cdot} p_{\cdot j}}{\sqrt{p_{i\cdot} p_{\cdot j}}} \right]
$$

The $\bar{q}_{ij}$ values are equal to the $\chi$ values, a constant apart: $\bar{q}_{ij} = \chi_{ij}/\sqrt{f_{\cdot \cdot}}$.

With our data:

```{r}
# Initialize Qbar matrix
Qbar <- matrix(ncol = ncol(Y), nrow = nrow(Y))
colnames(Qbar) <- colnames(Y)
rownames(Qbar) <- rownames(Y)

for(i in 1:nrow(Y)) { # For each row
  for (j in 1:ncol(Y)) { # For each column
    # Do the sum
    pi_ <- sum(P[i, ])
    p_j <- sum(P[, j])
    
    # Compute the transformation
    Qbar[i, j] <- (P[i, j] - (pi_*p_j))/sqrt(pi_*p_j)
  }
}
```


We could also do this by matrix multiplication: 

$$
\bar{Q} = D(p_{i\cdot})^{-1/2} P D(p_{\cdot j})^{-1/2}
$$

In [@carroll1986], the formula is:

$$
\bar{Q} = D(y_{i\cdot})^{-1/2} Y D(y_{\cdot j})^{-1/2}
$$

where matrices $D(p_{i \cdot})$ and $D(p_{\cdot j})$ are the diagonal matrices with the row and columns sums of $P$ (respectively) and $D(y_{i \cdot})$ and $D(y_{\cdot j})$ are he equivalent for matrix $Y$.

*NB: I could not verify this result numerically, since here $\bar{Q}$ is not equal to $D(p_{i \cdot})^{-1/2} Q D(p_{\cdot j})^{-1/2}$, as in [@carroll1987].*

```{r}
# Define weights matrices
Dpi_ <- diag(rowSums(P))
Dp_j <- diag(colSums(P))

# Also define a variable for just the sums for easier manipulation
dpi_ <- rowSums(P)
dp_j <- colSums(P)

# Define weights matrices
Dyi_ <- diag(rowSums(Y))
Dy_j <- diag(colSums(Y))

# Also define a variable for just the sums for easier manipulation
dyi_ <- rowSums(Y)
dy_j <- colSums(Y)
```

```{r, include=FALSE}
# Compute Qbar with the formula from Caroll
Qbar2 <- diag(dyi_^(-1/2)) %*% Y %*% diag(dy_j^(-1/2))

Qbar2/Qbar # It is not equal: not centered? 
# When performing CA on a non-centered matrix, there is one extra eigenvalue (Legendre & Legendre) of value 1. This is probably what Caroll et al do in their article.

# Compute Qbar with the Ps
Qbar3 <- diag(dpi_^(-1/2)) %*% Y %*% diag(dp_j^(-1/2))
Qbar3/Qbar # It is not equal and also not equal to Qbar2

# Compute Qbar with all Ps
Qbar4 <- diag(dpi_^(-1/2)) %*% P %*% diag(dp_j^(-1/2))
Qbar4/Qbar # It equal to Qbar2
```

### Singular value decomposition of $\bar{Q}$

$$
\bar{Q} = \hat{U}WU'
$$

Where $\bar{Q}$ is $r \times c$, $\hat{U}$ is $r \times c$, $W$ is a $c \times c$ diagonal matrix (assuming $r \geq c$; the table can be transposed to meet this condition) and $U'$ is $c \times c$.

Note that the last eigenvalue of this SVD will always be null (due to the centering).

```{r}
sv <- svd(Qbar)

# Eigenvalues
(delta <- sv$d) # Last eigenvalue is zero
lambda <- delta^2
Lambda <- diag(lambda)
 
# Eigenvectors
Uhat <- sv$u
U <- sv$v
```

This SVD is equivalent to a diagonalization: with the SVD, we can rewrite $\bar{Q}' \bar{Q}$:

$$
\bar{Q}' \bar{Q} = U W' \hat{U'} \hat{U} W U'
$$

We have $\hat{U}' \hat{U} = I$ (because $\hat{U}$ is orthonormal), so:

$$
\bar{Q}' \bar{Q} =  U W' W U'
$$

If we rewrite $W' W$ as $\Lambda$ (so $W = \Lambda^{1/2}$), and since $U' = U^{-1}$ ($U$ is orthonormal), then we can write this as a diagonalization:

$$
\bar{Q}' \bar{Q} =  U \Lambda U^{-1}
$$

Similarly, we can rewrite $\bar{Q} \bar{Q}'$:

$$
\bar{Q} \bar{Q}' =  \hat{U} \Lambda \hat{U}^{-1}
$$

```{r}
# Diagonalize Q'Q ---
dg1 <- eigen(t(Qbar) %*% Qbar)

# Eigenvalues are equal to the square roots of SVD eigenvalues
all((dg1$values - lambda) < 10e-10)

# Eigenvectors are equal to U
all(abs(dg1$vectors/U) - 1 < 10e-10)
```

```{r}
# Diagonalize QQ' ---
dg2 <- eigen(Qbar %*% t(Qbar))

# Eigenvalues are equal to the square roots of SVD eigenvalues
all((dg1$values - lambda) < 10e-10)

# Eigenvectors are equal to Uhat
all(abs(dg2$vectors[, 1:(c-1)]/Uhat[, 1:(c-1)]) - 1 < 10e-10)
```

## Scalings

::: {.callout-tip title="*TL;DR*"}
To plot rows and columns on separate plots, one can plot the eigenvectors $\hat{U}$ (rows = sites) and $U$ (columns = species).

To plot columns and rows individuals on the same biplot, different scalings have been proposed. For sites (rows), these scalings are equal to $\hat{S}_i = D(p_{i \cdot})^{-1/2} \hat{U} \Delta^\alpha$ (with $\alpha =$ 1, 0 or 1/2).

For species (columns), these scalings are equal to $\hat{S}_i = D(p_{\cdot j})^{-1/2} U \Delta^{1-\alpha}$.

-   Scaling type 1 ($\alpha = 1$): this scaling preserves the distances between rows. Rows (sites) are represented with $F = D(p_{i \cdot})^{-1/2} \hat{U} \Lambda^{1/2}$ and species (columns) with $V = D(p_{\cdot j})^{-1/2} U$.
-   Scaling type 2  ($\alpha = 0$): this scaling preserves distances between columns. Rows (sites) are represented with $\hat{V} = D(p_{i \cdot})^{-1/2} \hat{U}$ and species (columns) with $\hat{F} = D(p_{\cdot j})^{-1/2} U \Lambda^{1/2}$.
-   Scaling type 3  ($\alpha = 1/2$): this scaling is a compromise between scalings type 1 and 2. Rows (sites) are represented with $\hat{S}_3 = D(p_{i \cdot})^{-1/2} \hat{U} \Lambda^{1/4}$ and species (columns) with $S_3 = D(p_{\cdot j})^{-1/2} U \Lambda^{1/4}$.

As noted in [@carroll1987], if we plot distances of different scalings on the same biplot, we cannot interpret between-sets distances, but within-sets distances are still be interpretable. This is what the scaling type 4 described below does and this scaling is what [@carroll1987] refers to.
:::

Let's perform a CA with `ade4` to check results later.

```{r}
ca <- dudi.coa(Y, 
               scannf = FALSE, 
               nf = min(r, c))
```

### No scaling

One can represent the eigenvectors directly without scaling to display them on separate plots.

```{r, fig.height=4, fig.width=8, warning=FALSE}
#| code-fold: true

# Plot sites ---
g1 <- multiplot(indiv_row = Uhat, 
          indiv_row_lab = rownames(Y), 
          row_color = params$colsite,
          eig = lambda)

# Plot species ---
g2 <- multiplot(indiv_row = U, 
          indiv_row_lab = colnames(Y), 
          row_color = params$colspp,
          eig = lambda)

grid.arrange(grobs = list(g1, g2), nrow = 1)
```

### Scaling type 1

This scaling preserves the row $\chi^2$ distances and is useful to interpret distances between row individuals (sites). In this scaling, the rows individuals are positioned at the barycentre of the corresponding column (species) individuals.

For that, we use:

-   $F = D(p_{\cdot j})^{-1/2} \hat{U} \Lambda^{1/2}$ (rows = sites)
-   $V = D(p_{\cdot j})^{-1/2} U$ (columns = species)

```{r}
# Sites
F_ <- diag(dpi_^(-1/2)) %*% Uhat %*% Lambda^(1/2)

# Species
V <- diag(dp_j^(-1/2)) %*% U
```

*NB: $F$ (sites scores) can also be computed from the* **species** *scores, since there is a correspondence between $U$ and $\hat{U}$. This shows better the relationship between sites and species scores (sites are at the barycentre of their species with this scaling).*

*NB2: I could not find back the formula in [@legendre2012] for $F = D(p_{i\cdot})^{-1} Q V$ and $\hat{F} = D(p_{\cdot j})^{-1} Q' \hat{V}$ (p 479). Indeed, for these formulas to be valid, we need $\bar{Q} = D(p_{i \cdot})^{-1/2} Q D(p_{\cdot j})^{-1/2}$, as in [@carroll1987], but it is not the case here.*

```{r}
# Compute sites coordinates using species coordinates
F2 <- diag(dpi_^(-1/2)) %*% Qbar %*% U

# Check that this corresponds to F_ cmputed above
all(F_[, 1:(c-1)]/F2[, 1:(c-1)] - 1 < 10e-10)
```


```{r, include=FALSE}
F_/ca$li
V/ca$c1

scatter(ca, method = 2,
        posieig = 'none')

s.label(ca$c1,
        ppoints.col = params$colspp,
        plabels.col = params$colspp,
        plabels.optim = TRUE) # Spp are constrained at variance 1
s.label(ca$li, 
        ppoints.col = params$colsite,
        plabels.col = params$colsite,
        plabels.optim = TRUE,
        add = TRUE) # Sites distances are preserved
```

```{r, fig.height=6, fig.width=6, warning=FALSE}
#| code-fold: true

multiplot(indiv_row = F_, indiv_col = V, 
          indiv_row_lab = rownames(Y), indiv_col_lab = colnames(Y), 
          row_color = params$colsite, col_color = params$colspp,
          eig = lambda)
```



### Scaling type 2

This preserves $\chi^2$ distances between species on the plot. Here, species are positioned at the centroid of sites.

We use:

-   $\hat{V} = D(p_{i\cdot})^{-1/2} \hat{U}$ (rows = sites)
-   $\hat{F} = D(p_{\cdot j})^{-1/2} U \Lambda^{1/2}$ (columns = species)

```{r}
# Sites
Vhat <- diag(dpi_^(-1/2)) %*% Uhat

# Species
Fhat <- diag(dp_j^(-1/2)) %*% U %*% Lambda^(1/2)
```

*NB: like $F$, $\hat{F}$ (species scores) can also be computed from the* **sites** *scores. This shows better the relationship between species and sites scores (species are at the barycentre of their sites with this scaling).*


```{r}
# Compute sites coordinates using species coordinates
Fhat2 <- diag(dp_j^(-1/2)) %*% t(Qbar) %*% Uhat

# Check that this corresponds to Fhat cmputed above
all(Fhat[, 1:(c-1)]/Fhat2[, 1:(c-1)] - 1 < 10e-10)
```

```{r, include=FALSE}
Fhat/ca$co
Vhat/ca$l1

scatter(ca, method = 3, 
        posieig = 'none')

s.label(ca$l1, 
        ppoints.col = params$colsite,
        plabels.col = params$colsite,
        plabels.optim = TRUE) # Sites are constrained at variance 1
s.label(ca$co,
        ppoints.col = params$colspp,
        plabels.col = params$colspp,
        plabels.optim = TRUE,
        add = TRUE) # Spp distances are preserved
```

```{r, fig.height=6, fig.width=6, warning=FALSE}
#| code-fold: true
multiplot(indiv_row = Vhat, indiv_col = Fhat, 
          indiv_row_lab = rownames(Y), indiv_col_lab = colnames(Y), 
          row_color = params$colsite, col_color = params$colspp,
          eig = lambda)
```


### Scaling type 3

It is a compromise between scalings 1 and 2. It preserves none of the $\chi^2$ distances.

We use:

-   $\hat{S}_3 = D(p_{i\cdot})^{-1/2} \hat{U} \Lambda^{1/4}$ (for sites)
-   $S_3 = D(p_{\cdot j})^{-1/2} U \Lambda^{1/4}$ (for species).

```{r}
s3_r <- diag(dpi_^(-1/2)) %*% Uhat %*% Lambda^(1/4)
s3_c <- diag(dp_j^(-1/2)) %*% U %*% Lambda^(1/4)
```

```{r, include=FALSE}
# This is not exactly adequate
scatter(ca, method = 1,
        posieig = 'none')

# This is
sites_ade4 <- as.matrix(ca$l1) %*% diag(ca$eig^(1/4))
s.label(sites_ade4, 
        ylim = c(-5, 5),
        xlim = c(-5, 5),
        ppoints.col = params$colsite,
        plabels.col = params$colsite,
        plabels.optim = TRUE)
spp_ade4 <- as.matrix(ca$c1) %*% diag(ca$eig^(1/4))
s.label(spp_ade4,
        ppoints.col = params$colspp,
        plabels.col = params$colspp,
        plabels.optim = TRUE,
        add = TRUE)
```

```{r, fig.height=6, fig.width=6, warning=FALSE}
#| code-fold: true
multiplot(indiv_row = s3_r, indiv_col = s3_c, 
          indiv_row_lab = rownames(Y), indiv_col_lab = colnames(Y), 
          row_color = params$colsite, col_color = params$colspp,
          eig = lambda)
```

### Scaling type 4

Use $F$ (sites) and $\hat{F}$ (species). Then, both $\chi^2$ distances are preserved. It is useful for a table crossing two factors.

```{r, include=FALSE}
s.label(ca$li, 
        ylim = c(-2, 2),
        xlim = c(-3, 2),
        ppoints.col = params$colsite,
        plabels.col = params$colsite,
        plabels.optim = TRUE)
s.label(ca$co,
        ppoints.col = params$colspp,
        plabels.col = params$colspp,
        plabels.optim = TRUE,
        add = TRUE)
```

```{r, fig.height=6, fig.width=6, warning=FALSE}
#| code-fold: true

multiplot(indiv_row = F_, indiv_col = Fhat, 
          indiv_row_lab = rownames(Y), indiv_col_lab = colnames(Y), 
          row_color = params$colsite, col_color = params$colspp,
          eig = lambda)
```

## Interpretation

Using the "transition formula" defined above ($\hat{U} = \bar{Q}U\Lambda^{-1/2}$), we can relate $V$ and $\hat{V}$ with the following equation:

$$
\hat{V} \Lambda^{1/2} = D(p_{i\cdot})^{-1/2}\bar{Q}D(p_{\cdot j})^{1/2}V
$$

This equation relates the ordination of rows (sites) ($\hat{V}$) to the ordination of columns (species) ($V$). The "conversion factor" is $\Lambda^{1/2}$, which translates to $\sqrt{\lambda_h}$ along principal axis $h$.

Indeed, the eigenvalue $\lambda_h$ is a measure of the correlation of the rows and columns ordinations along axis $h$.

If species have a unimodal (bell-shaped) response along the gradient defined by the sites ordination along a given axis, then their position should be close to their niche optimum.

Depending on he position of, say, species, in the multivariate space, there are several interpretations:

-   species that are absent from most sites: often at the edge, close to a site where they happen to be present. They have little influence on the analysis.
-   species that are in the center: either have their optimum there, they have a multimodal niche or their niche is not influenced by the latent variables of the ordination axes.
-   species found away from the center but not at the edges: more likely to display clear relationships with the axis

::: callout-note
Rare species are generally not very interesting because they are exceptions, not a general tendency. So some authors propose strategies to remove them, notably an iterative procedure. First do the complete CA, then remove the species seen one, twice... etc. Note the total inertia and the eigenvalues. When there is a jump, stop.
:::

::: callout-note
When there is a succession of species, along an hypothetical gradient, the CA may lead to an arch shape. There are techniques to detrend it, but knowing how to interpret this effect is probably more important.
:::

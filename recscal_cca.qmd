---
title: "Reciprocal scaling with CCA"
editor: source
params:
  colsite: "burlywood4"
  colspp: "cornflowerblue"
---

```{r, results='hide', message=FALSE}
#| code-fold: true

# Paths
library(here)

# Multivariate analysis
library(ade4)
library(adegraphics)

# dc-CA
source(here("functions/dpcaiv2-ade4.R"))

# Reciprocal scaling
source(here("functions/reciprocal.R"))

# Matrix algebra
library(expm)

# Plots
library(CAnetwork)
```


```{r}
#| code-fold: true

# Define bound for comparison to zero
zero <- 10e-10
```

## Introduction

This is an extension of reciprocal scaling defined for correspondence analysis by @thioulouse1992 to canonical correspondence analysis.

Here, we start from two matrices:

-   A data matrix $Y$ ($r \times c$)
-   A matrix of predictor variables (environmental variabnes) $E$ ($r \times l$)

```{r, echo=FALSE}
dat <- readRDS(here("data/Barbaro2012.rds"))

Y <- dat$comm
E <- dat$envir

l <- ncol(E)
r <- dim(Y)[1]
c <- dim(Y)[2]

plotmat(r = r, c = c, l = l, 
        E = TRUE)
```

```{r}
(r <- dim(Y)[1])
(c <- dim(Y)[2])
(l <- ncol(E))
```

## Computation

### From CCA scores

We compute the $H_k(i, j)$ from the LC (for rows = sites) and WA (for columns = species) scores computed with CCA (noted $LC$ and $C$). This formula is a direct extension of formula (11) in @thioulouse1992 but we replace the CA ordination scores with the CCA ordination scores.

In CCA, we have several scores for the sites. The notation $LC_k(i)$ represents the LC scores (or the `li` of ade4). The $C_k(j)$ are the species scores `co`.

$$
H_k(i, j) = \frac{LC_k(i) + C_k(j)}{\sqrt{2 \lambda_k \mu_k}}
$$

```{r}
Ydf <- as.data.frame(Y)
ca <- dudi.coa(Ydf, 
               scannf = FALSE,
               nf = min(r - 1, c - 1))

neig <- min(c(r-1, c, l))
cca <- pcaiv(dudi = ca, 
             df = E,
             scannf = FALSE,
             nf = neig)

L_CCA <- cca$li
C_CCA <- cca$co

lambda_CCA <- cca$eig
mu_CCA <- 1 + sqrt(lambda_CCA)
```

We also compute reciprocal scaling for comparison (to check results, not shown):

```{r}
rec_cca <- reciprocal.caiv(cca)
```

```{r}
# Transform matrix to count table
Yfreq <- as.data.frame(as.table(Y))
colnames(Yfreq) <- c("row", "col", "Freq")

# Remove the cells with no observation
Yfreq0 <- Yfreq[-which(Yfreq$Freq == 0),]
Yfreq0$colind <- match(Yfreq0$col, colnames(Y)) # match index and species names


# Initialize results matrix
H <- matrix(nrow = nrow(Yfreq0), 
            ncol = length(lambda_CCA))

for (k in 1:length(lambda_CCA)) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Yfreq0)) { # For each observation
    i <- Yfreq0$row[obs]
    j <- Yfreq0$col[obs]
    H[ind, k] <- (L_CCA[i, k] + C_CCA[j, k])/sqrt(2*lambda_CCA[k]*mu_CCA[k])
    ind <- ind + 1
  }
}
```

```{r, include = FALSE}
# Check result
rec_cca[,1:neig]/H
```

### From canonical correlation analysis

To perform the canonical correlation analysis, we compute the inflated tables $R$ ($n_{\bar{0}} \times l$) and $C$ ($n_{\bar{0}} \times c$) from $Y$ ($r \times c$) and $E$ ($r \times l$). The difference with CA is that we use $E$ instead of $Y$ to compute the inflated table $R$. $R$ is equivalent to $E$ where rows of $E$ are duplicated as many times as there are correspondences in $Y$.

We take the frequency table defined before and use it to compute the inflated tables (with weights):

```{r}
# Create indicator tables
tabR <- acm.disjonctif(as.data.frame(Yfreq0$row))
tabR <- as.matrix(tabR) %*% as.matrix(E) # duplicate rows of E according to the correspondences of Y
tabC <- acm.disjonctif(as.data.frame(Yfreq0$col))
colnames(tabC) <- colnames(Y)

# Get weights
wt <- Yfreq0$Freq
```

Below are the first lines of tables $R$ and $C$:

```{r}
#| code-fold: true
knitr::kable(head(tabR, 30))
knitr::kable(head(tabC, 30))
```

Then, we perform a canonical correlation on the scaled tables $R_{scaled}$ and $C_{scaled}$. We find the coefficients $\rho$ and $\gamma$ maximizing the correlation between the scores $S_R = R_{scaled} \rho$ and $S_C = C_{scaled} \gamma$.

```{r}
# Center tables
tabR_scaled <- scalewt(tabR, wt, 
                       scale = FALSE)
tabC_scaled <- scalewt(tabC, wt, 
                       scale = FALSE)

res <- cancor(diag(sqrt(wt)) %*% tabR_scaled, 
              diag(sqrt(wt)) %*% tabC_scaled, 
              xcenter = FALSE, ycenter = FALSE)
# res gives the coefficients of the linear combinations that maximizes the correlation between the 2 dimensions
dim(res$xcoef) # l columns -> R_scaled is of full rank
dim(res$ycoef) # c-1 columns -> C_scaled is not of full rank

# Compute these scores from this coef
scoreR <- tabR_scaled[, 1:l]  %*% res$xcoef
scoreC <- tabC_scaled[, 1:(c-1)]  %*% res$ycoef
```

We have $H = (S_R + S_C)_{scaled}$.

```{r}
# Get H
scoreRC <- scoreR[, 1:l] + scoreC[, 1:l] # here l < c-1 so l axes
scoreRC_scaled <- scalewt(scoreRC, wt = wt)
```

```{r}
# Check result
all(abs(scoreRC_scaled/H) - 1 < zero)
```

### Plot RC scores

```{r, warning=FALSE, fig.width=5, fig.height=4}
#| code-fold: true
multiplot(indiv_row = H, 
          indiv_row_lab = paste0("site ", Yfreq0$row, "/", Yfreq0$col),
          row_color = "black", eig = lambda_CCA)
```

## Conditional means and variances from RC scores

::: {.callout-tip title="*TL;DR*"}
Once we have the correspondences scores, we can group them by row (site) or column (species) to compute conditional summary statistics:

-   conditional mean for site $i$ or species $j$ (for each axis $k$)
-   conditional variance for site $i$ or species $j$ (for each axis $k$)
-   conditional covariance for site $i$ or species $j$ (between axes $k$ and $l$)

These conditional statistics can be computed using $H_k(i,j)$ or using the CA scores:

**Formulas using** $H_k(i,j)$

The means and variances are simply the weighted means/variances of the $H_k(i, j)$ for a fixed $i$ or $j$.

|                                  | Rows (sites)                                                                               | Columns (species)                                                                           |
|-------------------|-----------------------------|------------------------|
| Mean for axis $k$                | $$m_k(i) = \frac{1}{y_{i\cdot}} \sum_{j = 1}^c y_{ij} H_k(i,j)$$                           | $$m_k(j) = \frac{1}{y_{\cdot j}} \sum_{i = 1}^r y_{ij} H_k(i,j)$$                           |
| Variance for axis $k$            | $$s_k^2(i) = \frac{1}{y_{i\cdot}} \sum_{j = 1}^c y_{ij} \left(H_k(i,j) - m_k(i)\right)^2$$ | $$s_k^2(j) = \frac{1}{y_{\cdot j}} \sum_{i = 1}^r y_{ij} \left(H_k(i,j) - m_k(j)\right)^2$$ |
| Covariance between axes $k$, $l$ | $$c_{kl}(i) = \frac{1}{y_{i \cdot}}\sum_{j=1}^c y_{ij}H_k(i, j)H_l(i, j) - m_k(i)m_l(i)$$  | $$c_{kl}(j) = \frac{1}{y_{\cdot j}}\sum_{i=1}^r y_{ij}H_k(i, j)H_l(i, j) - m_k(j)m_l(j)$$   |

**Formulas using CCA scores**

***Note that the LC score (notation:*** $LC$) is used for the species variance and the WA score (notation: $L$) for the sites variance.

|                                  | Rows (sites)                                                                                                                                    | Columns (species)                                                                                                                                |
|----------------------|----------------------------|-----------------------|
| Mean for axis $k$                | $$m_k(i) =  \frac{1}{\sqrt{2 \mu_k}} \times (LC1_k(i) + L_k(i))$$                                                                               | $$m_k(j) = \frac{\sqrt{\mu_k}}{\sqrt{2\lambda_k}} C_k(j)$$                                                                                       |
| Variance for axis $k$            | $$s^2_k(i) = \frac{1}{2\lambda_k\mu_k} \left( \frac{1}{y_{i \cdot}} \sum_{j = 1}^c \left(y_{ij} C_k^2(j) \right) - \lambda_k L_k^2(i) \right)$$ | $$s^2_k(j) = \frac{1}{2\lambda_k\mu_k} \left( \frac{1}{y_{\cdot j}} \sum_{i = 1}^r \left(y_{ij} LC_k^2(i) \right) - \lambda_k C_k^2(j) \right)$$ |
| Covariance between axes $k$, $l$ |                                                                                                                                                 |                                                                                                                                                  |
:::

Let's start from the means/variances computed from the RC scores ($H$).

```{r}
fac <- sqrt(mu_CCA)/sqrt(2*lambda_CCA)
n <- sum(Y)
```

### For rows = sites

Below is a graphical illustration of scoreRC grouped by rows:

```{r}
s.class(scoreRC,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$row),
        plabels.col = params$colsite, 
        main = "With RC score (points = correspondences)")
```

#### Formula with RC scores (definition)

We compute the groupwise mean and variance.

```{r}
# With scaled values
mrowsRC <- meanfacwt(scoreRC_scaled, fac = Yfreq0$row, wt = Yfreq0$Freq)
mrowsRC/(as.matrix(cca$l1 + cca$ls) %*% diag(1/sqrt(2*mu_CCA)))
```

```{r}
# With non-scaled values
mrowsRC_ns <- meanfacwt(scoreRC, fac = Yfreq0$row, wt = Yfreq0$Freq)
mrowsRC_ns/((cca$l1 + cca$ls)*1/sqrt(n))
```

Variances

```{r}
# With scaled values
varrowsRC <- varfacwt(scoreRC_scaled, fac = Yfreq0$row, wt = Yfreq0$Freq)

# With non-scaled values
varrowsRC_ns <- varfacwt(scoreRC, fac = Yfreq0$row, wt = Yfreq0$Freq)
```

#### Variance formula with CCA scores

```{r}
# Get marginal counts
yi_ <- rowSums(Y)
y_j <- colSums(Y)

varrowsCCA <- matrix(nrow = r, 
                     ncol = l)

for (i in 1:r) {
  # Get CCA scores for site i
  Li <- cca$ls[i, ]
  
  # Compute the part with the sum on Cj
  # we add all coordinates Cj^2 weighted by the number of observations on site i
  sumCj <- t(Y[i, ]) %*% as.matrix(cca$co)^2

  # Fill i-th row with site i variance along each axis
  varrowsCCA[i, ] <- (1/(2*lambda_CCA*mu_CCA)) * (((1/yi_[i])*sumCj) - lambda_CCA*as.numeric(Li)^2)
}
```

```{r}
varrowsRC/varrowsCCA
```

```{r, include=FALSE}
# We can also check the non-scaled RC value
varrowsRC_ns/(varrowsCCA %*% diag(2*mu_CCA/n))
```

### For columns = species

Below is an illustration of the RC scores grouped by species.

```{r}
s.class(scoreRC,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$colind),
        lab = colnames(Y),
        plabels.col = params$colspp, 
        main = "With RC score (points = correspondences)")
```

#### Formula with RC scores (definition)

```{r}
mcolsRC <- meanfacwt(scoreRC_scaled, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsRC/(as.matrix(cca$co) %*% diag(fac))
```

```{r}
mcolsRC_ns <- meanfacwt(scoreRC, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsRC_ns/cca$co
```

```{r}
# With scaled values
varcolsRC <- varfacwt(scoreRC_scaled, fac = Yfreq0$colind, wt = Yfreq0$Freq)

# With non-scaled values
varcolsRC_ns <- varfacwt(scoreRC, fac = Yfreq0$colind, wt = Yfreq0$Freq)
```

#### Variance formula with CCA scores

```{r}
varcolsCCA <- matrix(nrow = c, 
                     ncol = l)

for (j in 1:c) {
  # Get CCA scores for species j
  Cj <- cca$co[j, ]
  
  # Compute the part with the sum on Li
  # we add all coordinates Li^2 weighted by the number of observations on species j
  sumLi <- t(Y[, j]) %*% as.matrix(cca$li)^2

  # Fill i-th row with site i variance along each axis
  varcolsCCA[j, ] <- (1/(2*lambda_CCA*mu_CCA)) * (((1/y_j[j])*sumLi) - lambda_CCA*as.numeric(Cj)^2)
}
```

```{r}
varcolsRC/varcolsCCA

varcolsRC_ns/(varcolsCCA %*% diag(2*mu_CCA/n))
```

## Conditional means and variances from R scores and C scores

::: {.callout-tip title="*TL;DR*"}
For the scores computed with R scores and C scores, we have 3 types of formulas:

-   definition (weighted mean/variance/covariance)
-   formulas using the CCA scores
-   relation with the RC scores

Here, we don't show the definition.

**Formulas using CCA scores**

-   using R score

|                                  | Rows (sites)                                                                       | Columns (species)                                                                                                                            |
|------------------------|---------------------------|----------------------|
| Mean for axis $k$                | $$mR_k(i) = \frac{1}{\sqrt{n}} LC1_k(i)$$ ($LC1 =$ normed LC score (`$l1`)) | $$mR_k(j) =   \frac{1}{\sqrt{n}} C_k(j)$$                                                                                              |
| Variance for axis $k$            | None                                                                               | $$sR_k^2(j) = \frac{1}{n\lambda_k} \left( \frac{1}{y_{\cdot j}} \sum_{i = 1}^r \left(y_{ij} LC_k^2(i) \right) - \lambda_k C_k^2(j) \right)$$ |
| Covariance between axes $k$, $l$ |                                                                                    |                                                                                                                                              |

-   using C score

|                                  | Rows (sites)                                                                                                                                | Columns (species)                                                                |
|------------------------|---------------------------|----------------------|
| Mean for axis $k$                | $$\frac{1}{\sqrt{n}} L_k(i)$$ ($L_k(i) =$ WA score (`$ls`))                                                                          | $$\frac{1}{\sqrt{n}} C1_k(j)$$ ($C1_k(j) =$ normed species score (`$c1`)) |
| Variance for axis $k$            | $$sC_k^2(i) = \frac{1}{n\lambda_k} \left( \frac{1}{y_{i \cdot}} \sum_{j = 1}^c \left(y_{ij} C_k^2(j) \right) - \lambda_k L_k^2(i) \right)$$ | None                                                                             |
| Covariance between axes $k$, $l$ |                                                                                                                                             |                                                                                  |

**Relation between RC scores and R score / C score**

-   using R score

|                                  | Rows (sites)                                                                     | Columns (species)                                              |
|------------------------|---------------------------|----------------------|
| Mean for axis $k$                | $$mR_k(i) = \frac{\sqrt{2 \mu_k}}{\sqrt{n}} m_k(i) - \frac{1}{\sqrt{n}} L_k(i)$$ | $$mR_k(j) = \frac{\sqrt{2 \lambda_k}}{\sqrt{n \mu_k}} m_k(j)$$ |
| Variance for axis $k$            | None                                                                             | $sR^2_k(j) =  \frac{2\mu_k}{n} s^2_k(j)$                 |
| Covariance between axes $k$, $l$ |                                                                                  |                                                                |

-   using C score

|                                  | Rows (sites)                                                                       | Columns (species)                                    |
|------------------------|--------------------------|----------------------|
| Mean for axis $k$                | $$mC_k(i) = \frac{\sqrt{2 \mu_k}}{\sqrt{n}} m_k(i) - \frac{1}{\sqrt{n}} LC1_k(i)$$ | $$mC_k(j) = \frac{\sqrt{2}}{\sqrt{n \mu_k}} m_k(j)$$ |
| Variance for axis $k$            | $sC^2_k(i) = \frac{2\mu_k}{n} s^2_k(i)$                                     | None                                                 |
| Covariance between axes $k$, $l$ |                                                                                    |                                                      |
:::

#### For rows = sites (group per row)

In this section, we compute means and variances per row (for sites).

##### scoreC

Below is a graphical illustration of scoreC grouped by rows:

```{r}
s.class(scoreC,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$row),
        ppoints.col = params$colspp,
        plabels.col = params$colsite, 
        main = "With C score (points = species scores)")
```

We compute the following mean: $mC_k(i) = \frac{1}{y_{i\cdot}} \sum_{j = 1}^c y_{ij} \text{scoreC}_k(i,j)$. To compute these conditional means, we use the `meanfacwt` function from the `ade4` package.

```{r}
mrowsC <- meanfacwt(scoreC, fac = Yfreq0$row, wt = Yfreq0$Freq)
```

Then we compare this to a score obtained from CCA.

```{r}
mrowsC/(cca$ls * 1/sqrt(n))
```

??????? axis 4 ?????

```{r}
mrowsC[, 1:k]/(mrowsRC %*% diag(sqrt(2*mu_CCA/n)) - 1/sqrt(n)*cca$l1)
```

Now let's compute the variance of scoreC per row:

```{r}
varrowsC <- varfacwt(scoreC, fac = Yfreq0$row, wt = Yfreq0$Freq)
```

Compare it to the variance of the RC score:

```{r}
varrowsC[, 1:ncol(varrowsRC)]/(varrowsRC %*% diag(2*mu_CCA/n))
```

```{r, include=FALSE}
# This is the same as
varrowsC[, 1:ncol(varrowsRC)]/varrowsRC_ns
```

We can use this relationship to find the formula using CCA scores:

```{r}
varrowsC_CCA <- matrix(nrow = r, 
                       ncol = k)

for (i in 1:r) {
  # Get CA scores for site i
  Li <- cca$ls[i, ]
  
  # Compute the part with the sum on Cj
  # we add all coordinates Cj^2 weighted by the number of observations on site i
  sumCj <- t(Y[i, ]) %*% as.matrix(cca$co)^2

  # Fill i-th row with site i variance along each axis
  varrowsC_CCA[i, ] <- 1/(n*lambda_CCA)*((1/yi_[i])*sumCj - lambda_CCA*as.numeric(Li)^2)
}
```

```{r}
varrowsC[, 1:ncol(varrowsRC)]/varrowsC_CCA
```

##### scoreR

Now, we compute the mean per **row** (site) from the **row** (sites) scores.

Below is a graphical illustration of scoreR grouped by rows:

```{r}
s.class(scoreR,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$row),
        ppoints.col = params$colsite,
        plabels.col = params$colsite, 
        main = "With R score (points = sites scores)")
```

All points of the same site ares superimposed.

```{r}
mrowsR <- meanfacwt(scoreR, fac = Yfreq0$row, wt = Yfreq0$Freq)

mrowsR/(cca$l1*1/sqrt(n))
```

The variance is null.

### For columns = species (group per column)

##### scoreC

We group the scoreC per species. Below is an illustration:

```{r}
s.class(scoreC,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$colind),
        lab = colnames(Y),
        ppoints.col = params$colspp,
        plabels.col = params$colspp, 
        main = "With C score (points = species scores)")
```

```{r}
mcolsC <- meanfacwt(scoreC, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsC/(cca$c1*1/sqrt(n))
```

The variance is null.

##### scoreR

Below are the scoreR grouped by column:

```{r}
s.class(scoreR,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$colind),
        lab = colnames(Y),
        ppoints.col = params$colsite,
        plabels.col = params$colspp, 
        main = "With R score (points = sites scores)")
```

```{r}
mcolsR <- meanfacwt(scoreR, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsR/(cca$co*1/sqrt(n))
```

```{r}
varcolsR <- varfacwt(scoreR, fac = Yfreq0$colind, wt = Yfreq0$Freq)
```

```{r}
varcolsR/(varcolsRC %*% diag(2*mu_CCA/n))
```

```{r, include=FALSE}
# Same as
varcolsR/varcolsRC_ns
```

Similarly we can use this relationship to compute the variance directly from the CCA scores (see in table).



## Tests

### Non-reciprocal score

We can remain in the 2 biplots showing $V$ with $U^\star$ (`c1` and `ls`) (scaling type 1 = rows niches) and $U$ and $V^\star$ (`co` and `l1`) (scaling type 2 = column niches).


#### H1 for rows niches

To do that, we define the "CA-correspondences" $h1_k(i, j)$ for scaling type 1:

$$h1_k(i, j) = \frac{u^\star_k(i) + v_k(j)}{2}$$

```{r}
# Initialize results matrix
H1 <- matrix(nrow = nrow(Yfreq0), 
             ncol = length(lambda_CCA))

for (k in 1:length(lambda_CCA)) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Yfreq0)) { # For each observation
    i <- Yfreq0$row[obs]
    j <- Yfreq0$col[obs]
    H1[ind, k] <- (cca$ls[i, k] + cca$c1[j, k])/2
    ind <- ind + 1
  }
}

corresp <- paste(Yfreq0$row, Yfreq0$col, sep = "-")
multiplot(indiv_row = as.data.frame(H1), 
          indiv_row_lab = corresp,
          row_color = "black")
```

```{r}
# Groupwise mean
mrows_nr <- meanfacwt(H1, fac = Yfreq0$row, wt = Yfreq0$Freq)
all(abs(abs(mrows_nr/cca$ls) - 1) < zero)
head(mrows_nr/mrowsRC) # It is different from the reciprocal scaling means

# Groupwise variance
varrows_nr <- varfacwt(H1, fac = Yfreq0$row, wt = Yfreq0$Freq)
res <- varrows_nr %*% diag(2/mu_CCA) # Factor 2/mu
all(abs(res/varrowsRC) - 1 < zero)

# We could also multiply H1 before computing the variance
H1_scaled <- H1 %*% diag(sqrt(2/mu_CCA)) # Factor sqrt(2/mu)
varrows_nr_scaled <- varfacwt(H1_scaled, fac = Yfreq0$row, wt = Yfreq0$Freq)
all(abs(varrows_nr_scaled/varrowsRC - 1) < zero)

# Plots
s.class(H1, 
        fac = Yfreq0$row, plabels.col = params$colsite, 
        main = "Non-reciprocal scaling")
s.class(H,
        fac = Yfreq0$row, plabels.col = params$colsite, 
        main = "Reciprocal scaling")
```


$h1_k(i, j)$ can also be defined from the canonical correlation scores:

$$h1_k(i, j) = \frac{\sqrt{n} (R \overline{S_C} + S_C)}{2}$$
where $R \overline{S_C}$ corresponds to the duplicated version of $\overline{S_C}$, the mean of C-scores by rows.

```{r}
res <- meanfacwt(scoreC, fac = Yfreq0$row, wt = Yfreq0$Freq) # get the mean of scoreC by row
tabR <- as.matrix(acm.disjonctif(as.data.frame(Yfreq0$row)))
scoreRls <- tabR %*% res # Duplicate means according to correspondences of R

# Find back the formula from the scores 
H1_cancor <- (sqrt(n)*(scoreRls[, 1:l] + scoreC[, 1:l]))/2
# H1_cancor_scaled <- scalewt(H1_cancor, wt = wt/sum(wt))

all(abs(abs(H1_cancor/H1) - 1) < zero)
```

#### H2 for columns niches

We define the "CA-correspondences" $h2_k(i, j)$ for scaling type 2:

$$h2_k(i, j) = \frac{u_k(i) + v^\star_k(j)}{2}$$

```{r}
# Initialize results matrix
H2 <- matrix(nrow = nrow(Yfreq0), 
             ncol = length(lambda_CCA))

for (k in 1:length(lambda_CCA)) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Yfreq0)) { # For each observation
    i <- Yfreq0$row[obs]
    j <- Yfreq0$col[obs]
    H2[ind, k] <- (cca$l1[i, k] + cca$co[j, k])/2
    ind <- ind + 1
  }
}

corresp <- paste(Yfreq0$row, Yfreq0$col, sep = "-")
multiplot(indiv_row = as.data.frame(H2), 
          indiv_row_lab = corresp,
          row_color = "black")
```

```{r}
# Groupwise mean
mcols_nr <- meanfacwt(H2, fac = Yfreq0$col, wt = Yfreq0$Freq)
all(abs(abs(mcols_nr/cca$co) - 1) < zero)
res <- mcols_nr %*% diag(sqrt(mu_CCA)/sqrt(2*lambda_CCA)) # factor sqrt(mu)/sqrt(2*lambda)
all(abs(res/mcolsRC - 1) < zero) 

# Groupwise variance
varcols_nr <- varfacwt(H2, fac = Yfreq0$col, wt = Yfreq0$Freq)
varcols_nr_scaled <- varcols_nr %*% diag(2/(mu_CCA)) # factor 2/mu
all(abs(varcols_nr_scaled/varcolsRC - 1) < zero) 

# Plots
s.class(H2, fac = Yfreq0$row, main = "Non-reciprocal scaling")
s.class(H, fac = Yfreq0$row, main = "Reciprocal scaling")
```


$h2_k(i, j)$ can also be defined from the canonical correlation scores:

$$h2_k(i, j) = \frac{\sqrt{n} (S_R + S_C  \Lambda^{1/2})}{2}$$

```{r}
# Find back the formula from the scores 
H2_cancor <- (sqrt(n)*(scoreR[, 1:l] + scoreC[, 1:l] %*% diag(lambda_CCA^(1/2))))/2

all(abs(abs(H2_cancor/H2) - 1) < zero)
```

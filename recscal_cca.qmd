---
title: "Reciprocal scaling with CCA"
editor: source
params:
  colsite: "burlywood4"
  colspp: "cornflowerblue"
---

```{r, results='hide', message=FALSE}
#| code-fold: true

# Paths
library(here)

# Multivariate analysis
library(ade4)
library(adegraphics)

# Matrix algebra
library(expm)

# Plots
library(CAnetwork)
```


```{r}
#| code-fold: true

# Define bound for comparison to zero
zero <- 10e-10
```

## Introduction

This is an extension of reciprocal scaling defined for correspondence analysis by @thioulouse1992 to canonical correspondence analysis.

Here, we start from two matrices:

-   A data matrix $Y$ ($r \times c$)
-   A matrix of predictor variables (environmental variabnes) $E$ ($r \times l$)

```{r, echo=FALSE}
dat <- readRDS(here("data/Barbaro2012.rds"))

Y <- dat$comm
E <- dat$envir

l <- ncol(E)
r <- dim(Y)[1]
c <- dim(Y)[2]

plotmat(r = r, c = c, l = l, 
        E = TRUE)
```

```{r}
(r <- dim(Y)[1])
(c <- dim(Y)[2])
(l <- ncol(E))
```

## Computation

::: {.callout-tip title="*TL;DR*"}
We can compute reciprocal scaling score using CCorA and CCA scores.

**From canonical correlation analysis**
We perform the CCorA of tables $E_{infl}$ and $Y_{infl}$. The two sets of scores give the correspondences in sites and species space.

**From CCA**
We can show that$scoreC = V$ (`c1`) and $scoreR = Z2$ (`l1`).
:::


### From canonical correlation analysis

To perform the canonical correlation analysis, we compute the inflated tables $R$ ($n_{\bar{0}} \times l$) and $C$ ($n_{\bar{0}} \times c$) from $Y$ ($r \times c$) and $E$ ($r \times l$). The difference with CA is that we use $E$ instead of $Y$ to compute the inflated table $R$. $R$ is equivalent to $E$ where rows of $E$ are duplicated as many times as there are correspondences in $Y$.

```{r}
# Transform matrix to count table
P <- Y/sum(Y)
Pfreq <- as.data.frame(as.table(P))
colnames(Pfreq) <- c("row", "col", "Freq")

# Remove the cells with no observation
Pfreq0 <- Pfreq[-which(Pfreq$Freq == 0),]
Pfreq0$colind <- match(Pfreq0$col, colnames(Y)) # match index and species names
Pfreq0$col <- factor(Pfreq0$col)
Pfreq0$row <- factor(Pfreq0$row)

pi_ <- rowSums(P)
p_j <- colSums(P)
```

We take the frequency table defined before and use it to compute the inflated tables (with weights):

```{r}
# Create indicator tables
tabR <- acm.disjonctif(as.data.frame(Pfreq0$row))
tabR <- as.matrix(tabR) %*% as.matrix(E) # duplicate rows of E according to the correspondences of Y
tabC <- acm.disjonctif(as.data.frame(Pfreq0$col))
colnames(tabC) <- colnames(Y)

# Get weights
wt <- Pfreq0$Freq
```

Below are the first lines of tables $R$ and $C$:

```{r}
#| code-fold: true
knitr::kable(head(tabR, 30))
knitr::kable(head(tabC, 30))
```

Then, we perform a canonical correlation on the scaled tables $R_{scaled}$ and $C_{scaled}$. We find the coefficients $\rho$ and $\gamma$ maximizing the correlation between the scores $S_R = R_{scaled} \rho$ and $S_C = C_{scaled} \gamma$.

```{r}
# Center tables
tabR_scaled <- scalewt(tabR, wt, 
                       scale = FALSE)
tabC_scaled <- scalewt(tabC, wt, 
                       scale = FALSE)

res <- cancor(diag(sqrt(wt)) %*% tabR_scaled, 
              diag(sqrt(wt)) %*% tabC_scaled, 
              xcenter = FALSE, ycenter = FALSE)
# res gives the coefficients of the linear combinations that maximizes the correlation between the 2 dimensions
dim(res$xcoef) # l columns -> R_scaled is of full rank
dim(res$ycoef) # c-1 columns -> C_scaled is not of full rank

# Compute these scores from this coef
scoreR <- tabR_scaled[, 1:l]  %*% res$xcoef
scoreC <- tabC_scaled[, 1:(c-1)]  %*% res$ycoef
rownames(scoreC) <- Pfreq0$col
rownames(scoreR) <- Pfreq0$row
```

### From CCA scores

```{r}
neig <- min(c(r-1, c, l))
ca <- dudi.coa(Y, 
               nf = c-1, 
               scannf = FALSE)
cca <- pcaiv(dudi = ca, 
             df = E,
             scannf = FALSE,
             nf = neig)
```


```{r}
sqrt(cca$eig)/res$cor
```

We check that unique scores correspond:

```{r}
fac <- Pfreq0$col
s.class(scoreC,
        wt = wt,
        fac = fac,
        plabels.col = params$colspp, 
        main = "Unique C scores")

fac <- Pfreq0$row
s.class(scoreR,
        wt = wt,
        fac = fac,
        plabels.col = params$colsite, 
        main = "Unique R scores")
```

```{r}
mrowsC <- meanfacwt(scoreC, fac = Pfreq0$col, wt = Pfreq0$Freq)
all(abs(abs(mrowsC/cca$c1) - 1) < zero)

mrowsR <- meanfacwt(scoreR, fac = Pfreq0$row, wt = Pfreq0$Freq)
all(abs(abs(mrowsR/cca$l1) - 1) < zero)
```

## Conditional means and variances

::: {.callout-tip title="*TL;DR*"}
For the scores computed with R scores and C scores, we have 3 types of formulas:

-   definition (weighted mean/variance/covariance)
-   formulas using the CCA scores

Here, we don't show the definition.

**Formulas using CCA scores**

-   using R score

|                                  | Rows (sites)                                                                       | Columns (species)                                                                                                                            |
|------------------------|---------------------------|----------------------|
| Mean for axis $k$                | $m_k(i) = z2_{ik}$ (`$l1`) | $m_k(j) = v_{jk}$ (`$c1`)                                                                                             |
| Variance for axis $k$            | None                                                                               | $$s_{jk}^2 =  \frac{1}{p_{\cdot j}} \sum_{i = 1}^r \left(p_{ij} {z2_{ik}}^2 - {v_{jk}}^2 \right)$$ |
| Covariance between axes $k$, $l$ |                                                                                    |                                                                                                                                              |

-   using C score

|                                  | Rows (sites)                                                                                                                                | Columns (species)                                                                |
|------------------------|---------------------------|----------------------|
| Mean for axis $k$                | $u^\star_{ik}$ (WA score `ls`)                                                                          | $$v_{jk}$$ (`$c1`) |
| Variance for axis $k$            | $$s_k^2(i) = \frac{1}{p_{i \cdot}} \sum_{j = 1}^c \left(p_{ij} v_{jk} \right) - {u^\star_{ik}}^2$$ | None                                                                             |
| Covariance between axes $k$, $l$ |                                                                                                                                             |                                                                                  |
:::

#### For rows = sites (group per row)

In this section, we compute means and variances per row (for sites).

##### scoreC

Below is a graphical illustration of scoreC grouped by rows:

```{r}
s.class(scoreC,
        wt = Pfreq0$Freq,
        fac = as.factor(Pfreq0$row),
        ppoints.col = params$colspp,
        plabels.col = params$colsite, 
        main = "With C score (points = species scores)")
```

We compute the following mean: $m_k(i) = \frac{1}{y_{i\cdot}} \sum_{j = 1}^c p_{ij} \text{scoreC}_k(i,j)$. To compute these conditional means, we use the `meanfacwt` function from the `ade4` package.

```{r}
mrowsC <- meanfacwt(scoreC, fac = Pfreq0$row, wt = Pfreq0$Freq)
```

Then we compare this to a score obtained from CCA.

```{r}
mrowsC/cca$ls
```

??????? axis 4 ?????

Now let's compute the variance of scoreC per row:

```{r}
varrowsC <- varfacwt(scoreC, fac = Pfreq0$row, wt = Pfreq0$Freq)
```

We can use this relationship to find the formula using CCA scores:

```{r}
varrowsC_CCA <- matrix(nrow = r, 
                       ncol = neig)

for (i in 1:r) {
  # Get CA scores for site i
  Li <- cca$ls[i, ]
  
  # Compute the part with the sum on Cj
  # we add all coordinates Cj^2 weighted by the number of observations on site i
  sumj <- t(P[i, ]) %*% as.matrix(cca$c1)^2
  # sumj <- t(Y[i, ]) %*% as.matrix(cca$co)^2

  # Fill i-th row with site i variance along each axis
  # varrowsC_CCA[i, ] <- 1/(n*lambda_CCA)*((1/pi_[i])*sumj - lambda_CCA*as.numeric(Li)^2)
  varrowsC_CCA[i, ] <- ((1/pi_[i])*sumj - as.numeric(Li)^2)
}
```

```{r}
varrowsC[, 1:neig]/varrowsC_CCA
```

```{r}
varrowsC[, 1:neig]/varrowsC_CCA
```

We can also compute the covariance between axes $k$ and $l$ for site $i$ from CCorA scores:

$$c_{kl}(i) = \frac{1}{y_{i+}}\sum_{j=1}^c p_{ij}{s_Y}_k(i, j){s_Y}_l(i, j) - m_{ik}m_{il}$$

```{r}
covarrowsC <- covfacwt(scoreC, fac = Pfreq0$row, wt = Pfreq0$Freq)
```

This is equivalent to the following formula using CCA scores:

$$ c_{kl}(i) = \frac{1}{n} \left( \sum_{j=1}^c p_{ij}v_{jk}v_{jl} - u^\star_{ik}u^\star_{il} \right)$$
```{r}
# Define axes k and l
kk <- 1
lk <- 2
```

Below, we compute the covariance for all resources between axes $k=$`r kk` and $l = $`r lk` and compare to the covariance computed from the weighted covariance of CCorA scores:

```{r}
# Initialize vector
covarrowsC_CCA <- vector(mode = "numeric", length = r)

for (i in 1:r) {
  # Compute the sum
  sumj <- sum(P[i, ]*cca$c1[, kk]*cca$c1[, lk])

  # Covariance for species i
  covarrowsC_CCA[i] <- ((1/pi_[i])*sumj - cca$ls[i, kk]*cca$ls[i, lk])
}
```

```{r}
covarrowsC_kl <- sapply(covarrowsC, function(x) x[kk, lk])
res <- covarrowsC_CCA/covarrowsC_kl
all(abs(abs(res) - 1) < zero)
```


##### scoreR

Now, we compute the mean per **row** (site) from the **row** (sites) scores.

Below is a graphical illustration of scoreR grouped by rows:

```{r}
s.class(scoreR,
        wt = Pfreq0$Freq,
        fac = as.factor(Pfreq0$row),
        ppoints.col = params$colsite,
        plabels.col = params$colsite, 
        main = "With R score (points = sites scores)")
```

All points of the same site ares superimposed.

```{r}
mrowsR <- meanfacwt(scoreR, fac = Pfreq0$row, wt = Pfreq0$Freq)

mrowsR/cca$l1
```

The variance is null.

### For columns = species (group per column)

##### scoreC

We group the scoreC per species. Below is an illustration:

```{r}
s.class(scoreC,
        wt = Pfreq0$Freq,
        fac = as.factor(Pfreq0$colind),
        lab = colnames(Y),
        ppoints.col = params$colspp,
        plabels.col = params$colspp, 
        main = "With C score (points = species scores)")
```

```{r}
mcolsC <- meanfacwt(scoreC, fac = Pfreq0$colind, wt = Pfreq0$Freq)

mcolsC/cca$c1
```

The variance is null.

##### scoreR

Below are the scoreR grouped by column:

```{r}
s.class(scoreR,
        wt = Pfreq0$Freq,
        fac = as.factor(Pfreq0$colind),
        lab = colnames(Y),
        ppoints.col = params$colsite,
        plabels.col = params$colspp, 
        main = "With R score (points = sites scores)")
```

```{r}
mcolsR <- meanfacwt(scoreR, fac = Pfreq0$colind, wt = Pfreq0$Freq)

mcolsR/cca$co
```

```{r}
varcolsR <- varfacwt(scoreR, fac = Pfreq0$colind, wt = Pfreq0$Freq)
```

Similarly we can use this relationship to compute the variance directly from the CCA scores (see in table).


We can also compute the covariance between axes $k$ and $l$ for species $j$ from CCorA scores:

$$c_{kl}(j) = \frac{1}{y_{+j}}\sum_{i=1}^r p_{ij}{s_R}_k(i, j){s_R}_l(i, j) - m_{jk}m_{jl}$$

```{r}
covarcolsR <- covfacwt(scoreR, fac = Pfreq0$col, wt = Pfreq0$Freq)
```

This is equivalent to the following formula using CCA scores:

$$c_{kl}(j) = \frac{1}{n} \left( \sum_{i=1}^r p_{ij}z2_{ik}z2_{il} - v^\star_{jk}v^\star_{jl} \right)$$

```{r}
# Define axes k and l
kk <- 1
lk <- 2
```

Below, we compute the covariance for all resources between axes $k=$`r kk` and $l = $`r lk` and compare to the covariance computed from the weighted covariance of CCorA scores:

```{r}
# Initialize vector
covarcolsR_CCA <- vector(mode = "numeric", length = c)

for (j in 1:c) {
  # Compute the sum
  sumi <- sum(P[, j]*cca$l1[, kk]*cca$l1[, lk])

  # Covariance for species i
  covarcolsR_CCA[j] <- ((1/p_j[j])*sumi - cca$co[j, kk]*cca$co[j, lk])
}
```

```{r}
# Species that appear only once in a site
sp1 <- which(colnames(Y) %in% c("sp7", "sp13"))

covarcolsR_kl <- sapply(covarcolsR, function(x) x[kk, lk])
res <- (covarcolsR_CCA/covarcolsR_kl)[-sp1]
all(abs(abs(res) - 1) < zero)
```

## Non-reciprocal score

We can remain in the 2 biplots showing $V$ with $U^\star$ (`c1` and `ls`) (scaling type 1 = rows niches) and $U$ and $V^\star$ (`co` and `l1`) (scaling type 2 = column niches).


### $H_1$ (scaling type 1, rows niches)

To do that, we define the "CA-correspondences" $h1_k(i, j)$ for scaling type 1:

$$h1_k(i, j) = \frac{u^\star_k(i) + v_k(j)}{2}$$

```{r}
#| code-fold: true
# Initialize results matrix
H1 <- matrix(nrow = nrow(Pfreq0), 
             ncol = neig)

for (k in 1:neig) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Pfreq0)) { # For each observation
    i <- Pfreq0$row[obs]
    j <- Pfreq0$col[obs]
    H1[ind, k] <- (cca$ls[i, k] + cca$c1[j, k])/2
    ind <- ind + 1
  }
}
```


```{r, warning=FALSE}
#| code-fold: true
corresp <- paste(Pfreq0$row, Pfreq0$col, sep = "-")
multiplot(indiv_row = as.data.frame(H1), 
          indiv_row_lab = corresp,
          row_color = "black")
```

```{r}
# Groupwise mean
mrows_nr <- meanfacwt(H1, fac = Pfreq0$row, wt = Pfreq0$Freq)
all(abs(abs(mrows_nr/cca$ls) - 1) < zero)

# Groupwise variance ---
# Compare to RC score
varrows_nr <- varfacwt(H1, fac = Pfreq0$row, wt = Pfreq0$Freq)
# Compare to mean of scoreC
res <- 4*varrows_nr  # Factor 4
all(abs(abs(res/varrowsC[, 1:neig]) - 1) < zero)

# Groupwise covariance
covarrows_nr <- covfacwt(H1, fac = Pfreq0$row, wt = Pfreq0$Freq)
res <- lapply(covarrows_nr, function(x) x*4)  # Factor 4
# We check for the first covariance
all(abs(abs(res[[1]]/covarrowsC[[1]][1:l, 1:l]) - 1) < zero)
```


```{r}
#| code-fold: true
s.class(H1, 
        fac = Pfreq0$row, plabels.col = params$colsite, 
        wt = Pfreq0$Freq,
        main = "Non-reciprocal scaling")
```


$h1_k(i, j)$ can also be defined from the canonical correlation scores:


$$h1_k(i, j) = \frac{m_{ik} + {s_Y}_k(i, j)}{2}$$

```{r}
tabR <- as.matrix(acm.disjonctif(as.data.frame(Pfreq0$row)))
scoreRls <- tabR %*% mrowsC # Duplicate means according to correspondences of R

# Find back the formula from the scores 
H1_cancor <- (scoreRls[, 1:l] + scoreC[, 1:l])/2

all(abs(abs(H1_cancor/H1) - 1) < zero)
```

### $H_2$ (scaling type 2, columns niches)

We define the "CA-correspondences" $h2_k(i, j)$ for scaling type 2:

$$h2_k(i, j) = \frac{z2_k(i) + v^\star_k(j)}{2}$$

```{r}
#| code-fold: true
# Initialize results matrix
H2 <- matrix(nrow = nrow(Pfreq0), 
             ncol = neig)

for (k in 1:neig) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Pfreq0)) { # For each observation
    i <- Pfreq0$row[obs]
    j <- Pfreq0$col[obs]
    H2[ind, k] <- (cca$l1[i, k] + cca$co[j, k])/2
    ind <- ind + 1
  }
}
```


```{r, warning=FALSE}
#| code-fold: true
corresp <- paste(Pfreq0$row, Pfreq0$col, sep = "-")
multiplot(indiv_row = as.data.frame(H2), 
          indiv_row_lab = corresp,
          row_color = "black")
```

```{r}
# Groupwise mean ---
mcols_nr <- meanfacwt(H2, fac = Pfreq0$col, wt = Pfreq0$Freq)
# Compare with CCA score
all(abs(abs(mcols_nr/cca$co) - 1) < zero) 

# Groupwise variance ---
varcols_nr <- varfacwt(H2, fac = Pfreq0$col, wt = Pfreq0$Freq)
```


```{r}
#| code-fold: true
fac_col <- factor(Pfreq0$col)
s.class(H2, 
        fac = fac_col, plabels.col = params$colspp, 
        wt = Pfreq0$Freq,
        main = "Non-reciprocal scaling")
```


$h2_k(i, j)$ can also be defined from the canonical correlation scores:

$$h2_k(i, j) = \frac{ {s_R}_k(i, j) +  {s_Y}_k(i, j)  \sqrt{\lambda_k} }{2}$$

```{r}
# Find back the formula from the scores 
H2_cancor <- (scoreR[, 1:neig] + scoreC[, 1:neig] %*% diag(cca$eig^(1/2)))/2
all(abs(abs(H2_cancor/H2) - 1) < zero)
```

---
title: "Reciprocal scaling with dcCA"
editor: source
params:
  colsite: "burlywood4"
  colspp: "cornflowerblue"
---

```{r, results='hide', message=FALSE}
#| code-fold: true

# Paths
library(here)

# Multivariate analysis
library(ade4)
library(adegraphics)

# dc-CA
source(here("functions/dpcaiv2-ade4.R"))

# Reciprocal scaling
source(here("functions/reciprocal.R"))

# Matrix algebra
library(expm)

# Plots
source(here("functions/plot.R"))
library(gridExtra)
```

## Introduction

This is an extension of reciprocal scaling defined for correspondence analysis by @thioulouse1992 to double-constrained correspondence analysis.

Here, we have 3 matrices:

-   A data matrix $Y$ ($r \times c$)
-   A matrix of predictor variables $E$ ($r \times l$)
-   A matrix of predictor variables $T$ ($c \times k$)

```{r, echo=FALSE}
dat <- readRDS(here("data/Barbaro2012.rds"))

Y <- dat$comm
E <- dat$envir
T_ <- dat$traits

r <- dim(Y)[1]
c <- dim(Y)[2]
l <- ncol(E)
k <- ncol(T_)

plotmat(r = r, c = c, l = l, k = k,
        T_ = TRUE,
        E = TRUE)
```

```{r}
(r <- dim(Y)[1])
(c <- dim(Y)[2])
(l <- ncol(E))
(k <- ncol(T_))
```

## Computation

### From dcCA scores

We compute the $H_k(i, j)$ from the LC scores computed with dcCA (noted $LC$ for rows LS scores and $CC$ for columns LC scores). This formula is a direct extension of formula (11) in @thioulouse1992 but we replace the ordination scores obtained with CA with the ordination scores obtained with dcCA.

$$
H_k(i, j) = \frac{LC_k(i) + CC_k(j)}{\sqrt{2 \lambda_k \mu_k}}
$$

```{r}
Ydf <- as.data.frame(Y)
ca <- dudi.coa(Ydf, 
               scannf = FALSE,
               nf = min(r - 1, c - 1))

neig <- min(c(k, l))
dcca <- dpcaiv2(dudi = ca, 
                dfR = E,
                dfQ = T_,
                scannf = FALSE, 
                nf = neig)

L_dcca <- dcca$li
C_dcca <- dcca$co

lambda_dcca <- dcca$eig
mu_dcca <- 1 + sqrt(lambda_dcca)
```

We also compute reciprocal scaling for comparison:

```{r}
rec_dcca <- reciprocal.dpcaiv(dcca)
```

```{r}
# Transform matrix to count table
Yfreq <- as.data.frame(as.table(Y))
colnames(Yfreq) <- c("row", "col", "Freq")

# Remove the cells with no observation
Yfreq0 <- Yfreq[-which(Yfreq$Freq == 0),]
Yfreq0$colind <- match(Yfreq0$col, colnames(Y)) # match index and species names


# Initialize results matrix
H <- matrix(nrow = nrow(Yfreq0), 
            ncol = length(lambda_dcca))

for (kl in 1:length(lambda_dcca)) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Yfreq0)) { # For each observation
    i <- Yfreq0$row[obs]
    j <- Yfreq0$col[obs]
    H[ind, kl] <- (L_dcca[i, kl] + C_dcca[j, kl])/sqrt(2*lambda_dcca[kl]*mu_dcca[kl])
    ind <- ind + 1
  }
}
```

```{r, include = FALSE}
# Check result
rec_dcca[,1:neig]/H
```

### From canonical correlation analysis

To perform the canonical correlation analysis, we compute the inflated tables $R$ ($\omega \times l$) and $C$ ($\omega \times k$) from $E$ ($r \times l$) and $T$ ($r \times k$). $R$ and $C$ are respectively equivalents to $E$ and $T$ where rows of are duplicated as many times as there are correspondences in $Y$.

We take the frequency table defined before and use it to compute the inflated tables (with weights):

```{r}
# Create indicator tables
tabR <- acm.disjonctif(as.data.frame(Yfreq0$row))
tabR <- as.matrix(tabR) %*% as.matrix(E)
tabC <- acm.disjonctif(as.data.frame(Yfreq0$col))
tabC <- as.matrix(tabC) %*% as.matrix(T_)

# Get weights
wt <- Yfreq0$Freq
```

Below are the first lines of tables $R$ and $C$:

```{r, echo=FALSE}
knitr::kable(head(tabR, 30))
knitr::kable(head(tabC, 30))
```

Then, we perform a canonical correlation on the scaled tables $R_{scaled}$ and $C_{scaled}$. We find the coefficients $\rho$ and $\gamma$ maximizing the correlation between the scores $S_R = R_{scaled} \rho$ and $S_C = C_{scaled} \gamma$.

```{r}
# Center tables
tabR_scaled <- scalewt(tabR, wt, 
                       scale = FALSE)
tabC_scaled <- scalewt(tabC, wt, 
                       scale = FALSE)

res <- cancor(diag(sqrt(wt)) %*% tabR_scaled, 
              diag(sqrt(wt)) %*% tabC_scaled, 
              xcenter = FALSE, ycenter = FALSE)
# res gives the coefficients of the linear combinations that maximizes the correlation between the 2 dimensions
dim(res$xcoef) # l columns -> R_scaled is of full rank
dim(res$ycoef) # k columns -> C_scaled is of full rank

# Compute these scores from this coef
scoreR <- tabR_scaled[, 1:l]  %*% res$xcoef
scoreC <- tabC_scaled[, 1:k]  %*% res$ycoef
```

We have $H = (S_R + S_C)_{scaled}$.

```{r}
# Get H
scoreRC <- scoreR[, 1:l] + scoreC[, 1:l] # here we have l < k so l axes
scoreRC_scaled <- scalewt(scoreRC, wt = wt)
```

```{r}
# Check result
all(abs(scoreRC_scaled/H) - 1 < 10e-10)
```

### Plot

```{r, warning=FALSE}
#| code-fold: true
multiplot(indiv_row = H, 
          indiv_row_lab = paste0("site ", Yfreq0$row, "/", Yfreq0$col),
          row_color = "black", eig = lambda_dcca)
```

## Conditional means and variances from RC scores

::: {.callout-tip title="*TL;DR*"}
Once we have the correspondences scores, we can group them by row (site) or column (species) to compute conditional summary statistics:

-   conditional mean for site $i$ or species $j$ (for each axis $k$)
-   conditional variance for site $i$ or species $j$ (for each axis $k$)
-   conditional covariance for site $i$ or species $j$ (between axes $k$ and $l$)

These conditional statistics can be computed using $H_k(i,j)$ (weighted means/variances/covariances) or using the dcCA scores. We only present the dcCA scores formulas below.

**Formulas using dcCA scores**

|                        | Rows (sites)               | Columns (species)     |
|------------------------|----------------------------|-----------------------|
| Mean for axis $k$      | $$m_k(i) =  \frac{1}{\sqrt{2 \mu_k}} \times (LC1_k(i) + L_k(i))$$ | $$m_k(j) = \frac{1}{\sqrt{2 \mu_k}} \times (CC1_k(j) + C_k(j))$$                                                                                       |
| Variance for axis $k$ | $$s^2_k(i) = \frac{1}{2\lambda_k\mu_k} \left( \frac{1}{y_{i \cdot}} \sum_{j = 1}^c \left(y_{ij} CC_k^2(j) \right) - \lambda_k L_k^2(i) \right)$$ | $$s^2_k(j) = \frac{1}{2\lambda_k\mu_k} \left( \frac{1}{y_{\cdot j}} \sum_{i = 1}^r \left(y_{ij} LC_k^2(i) \right) - \lambda_k C_k^2(j) \right)$$ |
| Covariance between axes $k$, $l$ |   |   |
:::


Let's compare the means obtained from canonical correlations scores and the dcCA scores.

```{r}
n <- sum(Y)
```

### For rows = sites

Below is a graphical illustration of scoreRC grouped by rows:

```{r}
s.class(scoreRC,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$row),
        plabels.col = params$colsite, 
        main = "With RC score (points = correspondences)")
```

#### Formula with RC scores (definition)

```{r}
mrowsRC <- meanfacwt(scoreRC_scaled, fac = Yfreq0$row, wt = Yfreq0$Freq)
mrowsRC/(as.matrix(dcca$l1 + dcca$lsR) %*% diag(1/sqrt(2*mu_dcca)))
```

```{r, include=FALSE}
# Equivalent with the non scaled score
mrowsRC_ns <- meanfacwt(scoreRC, fac = Yfreq0$row, wt = Yfreq0$Freq)
mrowsRC_ns*sqrt(n)/(dcca$l1 +dcca$lsR)
```

```{r}
varrowsRC <- varfacwt(scoreRC_scaled, fac = Yfreq0$row, wt = Yfreq0$Freq)
```


#### Variance formula with dcCA scores

```{r}
# Get marginal counts
yi_ <- rowSums(Y)
y_j <- colSums(Y)

varrows_dcca <- matrix(nrow = r, 
                       ncol = l)

for (i in 1:r) {
  # Get CCA scores for site i
  Li <- dcca$lsR[i, ]
  
  # Compute the part with the sum on Cj
  # we add all coordinates Cj^2 weighted by the number of observations on site i
  sumCj <- t(Y[i, ]) %*% as.matrix(dcca$co)^2

  # Fill i-th row with site i variance along each axis
  varrows_dcca[i, ] <- (1/(2*lambda_dcca*mu_dcca)) * (((1/yi_[i])*sumCj) - lambda_dcca*as.numeric(Li)^2)
}
```

```{r}
varrowsRC/varrows_dcca
```


### For columns = species

Below is an illustration of the RC scores grouped by species.

```{r}
s.class(scoreRC,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$colind),
        lab = colnames(Y),
        plabels.col = params$colspp, 
        main = "With RC score (points = correspondences)")
```

#### Formula with RC scores (definition)


```{r}
mcolsRC <- meanfacwt(scoreRC_scaled, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsRC/(as.matrix(dcca$lsQ + dcca$c1) %*% diag(1/sqrt(2*mu_dcca)))
```
```{r}
varcolsRC <- varfacwt(scoreRC_scaled, fac = Yfreq0$colind, wt = Yfreq0$Freq)
```


#### Variance formula with dcCA scores

```{r}
varcols_dcca <- matrix(nrow = c, 
                       ncol = l)

for (j in 1:c) {
  # Get CCA scores for species j
  Cj <- dcca$lsQ[j, ]
  
  # Compute the part with the sum on Li
  # we add all coordinates Li^2 weighted by the number of observations on species j
  sumLi <- t(Y[, j]) %*% as.matrix(dcca$li)^2

  # Fill i-th row with site i variance along each axis
  varcols_dcca[j, ] <- (1/(2*lambda_dcca*mu_dcca)) * (((1/y_j[j])*sumLi) - lambda_dcca*as.numeric(Cj)^2)
}
```

```{r}
varcolsRC/varcols_dcca
```


## Conditional means and variances from R scores and C scores


::: {.callout-tip title="*TL;DR*"}
For the scores computed with R scores and C scores, we have 3 types of formulas:

-   definition (weighted mean/variance/covariance)
-   formulas using the dcCA scores
-   relation with the RC scores

Here, we don't show the definition.

**Formulas using dcCA scores**

-   using R score

|                        | Rows (sites)              | Columns (species)      |
|------------------------|---------------------------|------------------------|
| Mean for axis $k$      | $$mR_k(i) = \frac{1}{\sqrt{n}} LC1_k(i)$$ ($LC1 =$ normed LC score (`$l1`)) | $$mR_k(j) =  \frac{1}{\sqrt{n}} C_k(j)$$ ($C =$ species WA score (`$lsQ`)) |
| Variance for axis $k$  | None | $$sR_k^2(j) = \frac{1}{n\lambda_k} \left( \frac{1}{y_{\cdot j}} \sum_{i = 1}^r \left(y_{ij} LC_k^2(i) \right) - \lambda_k C_k^2(j) \right)$$ |
| Covariance between axes $k$, $l$ | | |

-   using C score

|                       | Rows (sites)              | Columns (species)    |
|-----------------------|---------------------------|----------------------|
| Mean for axis $k$     | $$\frac{1}{\sqrt{n}} L_k(i)$$ ($L_k(i) =$ sites WA score (`$lsR`)) | $$\frac{1}{\sqrt{n}} CC1_k(j)$$ ($CC1_k(j) =$ normed LC species score (`$c1`)) |
| Variance for axis $k$ | $$sC_k^2(i) = \frac{1}{n\lambda_k} \left( \frac{1}{y_{i \cdot}} \sum_{j = 1}^c \left(y_{ij} CC_k^2(j) \right) - \lambda_k L_k^2(i) \right)$$ | None  |
| Covariance between axes $k$, $l$ | | |

**Relation between RC scores and R score / C score**

-   using R score

|                                  | Rows (sites)                                                                     | Columns (species)                                              |
|------------------------|---------------------------|----------------------|
| Mean for axis $k$                | $$mR_k(i) = \frac{\sqrt{2 \mu_k}}{\sqrt{n}} m_k(i) - \frac{1}{\sqrt{n}} L_k(i)$$ | $$mR_k(j) = \frac{\sqrt{2 \mu_k}}{\sqrt{n}} m_k(j) - \frac{1}{\sqrt{n}} CC1_k(j)$$ |
| Variance for axis $k$            | None                                                                             | $sR^2_k(j) = \frac{2\mu_k}{n} s^2_k(j)$                 |
| Covariance between axes $k$, $l$ |                                                                                  |                                                                |

-   using C score

|                                  | Rows (sites)                                                                       | Columns (species)                                    |
|------------------------|--------------------------|----------------------|
| Mean for axis $k$                | $$mC_k(i) = \frac{\sqrt{2 \mu_k}}{\sqrt{n}} m_k(i) - \frac{1}{\sqrt{n}} LC1_k(i)$$ | $$mC_k(j) = \frac{\sqrt{2 \mu_k}}{\sqrt{n}} m_k(j) - \frac{1}{\sqrt{n}} C_k(j)$$ |
| Variance for axis $k$            | $sC^2_k(i) =  \frac{2\mu_k}{n} s^2_k(i)$                                     | None                                                 |
| Covariance between axes $k$, $l$ |                                                                                    |                                                      |
:::


### For rows = sites

##### scoreC

Below is a graphical illustration of scoreC grouped by rows:

```{r}
s.class(scoreC,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$row),
        ppoints.col = params$colspp,
        plabels.col = params$colsite, 
        main = "With C score (points = species scores)")
```


```{r}
mrowsC <- meanfacwt(scoreC, fac = Yfreq0$row, wt = Yfreq0$Freq)

mrowsC/(dcca$lsR*1/sqrt(n))
```

Now let's compute the variance of scoreC per row:

```{r}
varrowsC <- varfacwt(scoreC, fac = Yfreq0$row, wt = Yfreq0$Freq)
```

Compare it to the variance of the RC score:

```{r}
varrowsC[, 1:ncol(varrowsRC)]/(varrowsRC %*% diag(2*mu_dcca/n))
```


##### scoreR

Now, we compute the mean per **row** (site) from the **row** (sites) scores.

Below is a graphical illustration of scoreR grouped by rows:

```{r}
s.class(scoreR,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$row),
        ppoints.col = params$colsite,
        plabels.col = params$colsite, 
        main = "With R score (points = sites scores)")
```


```{r}
mrowsR <- meanfacwt(scoreR, fac = Yfreq0$row, wt = Yfreq0$Freq)

mrowsR/(dcca$l1*1/sqrt(n))
```

The variance is null.

### For columns = species

#### scoreC

We group the scoreC per species. Below is an illustration:

```{r}
s.class(scoreC,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$colind),
        lab = colnames(Y),
        ppoints.col = params$colspp,
        plabels.col = params$colspp, 
        main = "With C score (points = species scores)")
```

```{r}
mcolsC <- meanfacwt(scoreC, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsC/(dcca$c1*1/sqrt(n))
```

The variance is null.

#### scoreR

Below are the scoreR grouped by column:

```{r}
s.class(scoreR,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$colind),
        lab = colnames(Y),
        ppoints.col = params$colsite,
        plabels.col = params$colspp, 
        main = "With R score (points = sites scores)")
```

```{r}
mcolsR <- meanfacwt(scoreR, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsR/(dcca$lsQ*1/sqrt(n))
```

Now let's compute the variance of scoreC per row:

```{r}
varcolsR <- varfacwt(scoreR, fac = Yfreq0$colind, wt = Yfreq0$Freq)
```

Compare it to the variance of the RC score:

```{r}
varcolsR/(varcolsRC %*% diag(2*mu_dcca/n))
```


## Means by RC scores as a mean of LC and WA scores


The means of the RC scores by row (site) $m_k(i)$ multiplied by a scaling factor $\sqrt{2\mu_k}$ are equal to `$lsR`+`$l1`.

```{r}
#| code-fold: true

# Invert first column
mrowsRC_inv <- mrowsRC
mrowsRC_inv[, 1] <- -mrowsRC_inv[, 1]
```

```{r}
(mrowsRC_inv[, 1:2] %*% diag(sqrt(2*mu_dcca[1:2])))/(dcca$l1[, 1:2]+dcca$lsR[, 1:2])
```

However, perhaps it is more intuitive to see the $m_k(i)$ as the mean between `$lsR` and `$l1`: for that, we divide $m_k(i) \times \sqrt{2\mu_k}$ by 2.

The graph below shows $\frac{m_k(i) \times \sqrt{2\mu_k}}{2}$ along with the sites LS and WA scores. They are superimposed to the mean between `$lsR` and `$l1` on the graph below:

```{r}
#| code-fold: true

# Create a long df with $lsR and $l1 for the plot
bindlsR <- dcca$lsR
colnames(bindlsR) <- colnames(dcca$l1)
lscores <- rbind(dcca$l1, bindlsR)

```

```{r}
#| code-fold: true

s.class(lscores,
        fac = as.factor(rep(rownames(Y), 2)),
        ppoints.col = params$colsite,
        wt = rep(dcca$lw, 2),
        plabels.col = params$colsite)
s.label((mrowsRC_inv %*% diag(sqrt(mu_dcca*2)/2)),
        plabels.col = "darkorchid3",
        add = TRUE)
```


### Means of the not scaled scores

That was not too bad but it seems strange to compare LC1 and WA  scores: LC and WA would be a better fit.

```{r}
#| code-fold: true

# Create a long df with $lsR and $l1 for the plot
bindlsR <- dcca$lsR
colnames(bindlsR) <- colnames(dcca$li)
lscores <- rbind(dcca$li, bindlsR)
```

```{r}
#| code-fold: true

s.class(lscores,
        fac = as.factor(rep(rownames(Y), 2)),
        ppoints.col = params$colsite,
        wt = rep(dcca$lw, 2),
        plabels.col = params$colsite)
s.label((mrowsRC_inv %*% diag(sqrt(mu_dcca*lambda_dcca*2)/2)),
        plabels.col = "darkorchid3",
        add = TRUE)
```

But then the mean of `$lsR` and `$li` is not superimposed to the means of the RC scores.

## Tests

### For rows = sites

We define the "new" RC score $H2$ in which we replace $LC_k(i)$ with $L_k(i)$. Then, this should help to get the mean for the rows (which are at the mean of the $CC1_k(j)$).

$$
H2_k(i, j) = \frac{L_k(i) + CC_k(j)}{\sqrt{2 \lambda_k \mu_k}}
$$

```{r}
# Initialize results matrix
H2 <- matrix(nrow = nrow(Yfreq0), 
             ncol = length(lambda_dcca))

for (kl in 1:length(lambda_dcca)) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Yfreq0)) { # For each observation
    i <- Yfreq0$row[obs]
    j <- Yfreq0$col[obs]
    H2[ind, kl] <- (dcca$lsR[i, kl] + dcca$co[j, kl])/sqrt(2*lambda_dcca[kl]*mu_dcca[kl])
    ind <- ind + 1
  }
}
```

```{r}
multiplot(indiv_row = H2, 
          indiv_row_lab = paste0("site ", Yfreq0$row, "/", Yfreq0$col),
          row_color = "black", eig = lambda_dcca)
```

```{r}
s.class(H2,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$row),
        ppoints.col = "black",
        plabels.col = params$colsite, 
        main = "With H2 score (points = correspondences)")
```


We compute the mean and variance per site and compare them to the scores of dcCA:

```{r}
mrowsH2 <- meanfacwt(H2, fac = Yfreq0$row, wt = Yfreq0$Freq)

varrowsH2 <- varfacwt(H2, fac = Yfreq0$row, wt = Yfreq0$Freq)
```


```{r}
mrowsH2/(as.matrix(dcca$lsR) %*% diag(sqrt(mu_dcca/(2*lambda_dcca))))

varrowsH2/varrowsRC
```

A test with the linear model:

```{r}
lmp <- predict(lm(H2~tabR, weights = Yfreq0$Freq))

mean_lmp <- meanfacwt(lmp, fac = Yfreq0$row, wt = Yfreq0$Freq)

mean_lmp/dcca$li
```

However, the mean/variance per species is meaningless here.

```{r}
mcolsH2 <- meanfacwt(H2, fac = Yfreq0$colind, wt = Yfreq0$Freq)
varcolsH2 <- varfacwt(H2, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsH2/dcca$lsQ
mcolsH2/dcca$co
varcolsH2/varcolsRC
```

```{r}
lmp <- predict(lm(H2~tabC, weights = Yfreq0$Freq))

mean_lmp <- meanfacwt(lmp, fac = Yfreq0$colind, wt = Yfreq0$Freq)
mean_lmp/dcca$lsQ
```

### For columns = species

We define the "new" RC score $H3$ in which we replace $CC_k(j)$ with $C_k(j)$. Then, this should help to get the mean for the columns (which are at the mean of the $LC1_k(i)$).

$$
H3_k(i, j) = \frac{LC_k(i) + C_k(j)}{\sqrt{2 \lambda_k \mu_k}}
$$

```{r}
# Initialize results matrix
H3 <- matrix(nrow = nrow(Yfreq0), 
             ncol = length(lambda_dcca))

for (kl in 1:length(lambda_dcca)) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Yfreq0)) { # For each observation
    i <- Yfreq0$row[obs]
    j <- Yfreq0$col[obs]
    H3[ind, kl] <- (dcca$li[i, kl] + dcca$lsQ[j, kl])/sqrt(2*lambda_dcca[kl]*mu_dcca[kl])
    ind <- ind + 1
  }
}
```

```{r}
multiplot(indiv_row = H3, 
          indiv_row_lab = paste0("site ", Yfreq0$row, "/", Yfreq0$col),
          row_color = "black", eig = lambda_dcca)
```

```{r}
s.class(H3,
        wt = Yfreq0$Freq,
        fac = as.factor(Yfreq0$colind),
        labels = colnames(Y),
        ppoints.col = "black",
        plabels.col = params$colspp, 
        main = "With H3 score (points = correspondences)")
```

We compute the mean and variance per species:

```{r}
mcolsH3 <- meanfacwt(H3, fac = Yfreq0$colind, wt = Yfreq0$Freq)
varcolsH3 <- varfacwt(H3, fac = Yfreq0$colind, wt = Yfreq0$Freq)
```


```{r}
mcolsH3/(as.matrix(dcca$lsQ) %*% diag(sqrt(mu_dcca/(2*lambda_dcca))))
varcolsH3/varcolsRC
```

Test with the linear model:

```{r}
lmp <- predict(lm(H3~tabC, weights = Yfreq0$Freq))
mean_lmp <- meanfacwt(lmp, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mean_lmp/dcca$co
```

Here too, the mean and variance per rows are meaningless.

## Tests with WA scores

We define another "RC score" $H4$ in which we replace the LC scores with the WA scores ($LC_k(i)$ with $L_k(i)$ and $CC_k(j)$ with $C_k(j)$).

$$
H4_k(i, j) = \frac{L_k(i) + C_k(j)}{\sqrt{2 \lambda_k \mu_k}}
$$

```{r}
# Initialize results matrix
H4 <- matrix(nrow = nrow(Yfreq0), 
             ncol = length(lambda_dcca))

for (kl in 1:length(lambda_dcca)) { # For each axis
  ind <- 1 # initialize row index
  for (obs in 1:nrow(Yfreq0)) { # For each observation
    i <- Yfreq0$row[obs]
    j <- Yfreq0$col[obs]
    H4[ind, kl] <- (dcca$lsR[i, kl] + dcca$lsQ[j, kl])/sqrt(2*lambda_dcca[kl]*mu_dcca[kl])
    ind <- ind + 1
  }
}
```

```{r}
mrowsH4 <- meanfacwt(H4, fac = Yfreq0$row, wt = Yfreq0$Freq)
varrowsH4 <- varfacwt(H4, fac = Yfreq0$row, wt = Yfreq0$Freq)

mrowsH4/dcca$lsR
# mrowsH4/dcca$li
varrowsH4/varrowsRC
```

```{r}
mcolsH4 <- meanfacwt(H4, fac = Yfreq0$colind, wt = Yfreq0$Freq)
varcolsH4 <- varfacwt(H4, fac = Yfreq0$colind, wt = Yfreq0$Freq)

mcolsH4/dcca$lsQ
mcolsH4/dcca$co
varcolsH4/varcolsRC
```
---
title: "Canonical Correlation Analysis (CCorA)"
params:
  colsite: "burlywood4"
  colspp: "cornflowerblue"
---

```{r, results='hide', message=FALSE}
#| code-fold: true

# Paths
library(here)

# Multivariate analysis
library(ade4)
library(adegraphics)

# Matrix algebra
library(expm)

# Plots
library(ggplot2)
library(CAnetwork)
library(patchwork)
```

```{r}
#| code-fold: true

# Define bound for comparison to zero
zero <- 10e-10
```

## Introduction

Canonical correlation analysis is a symmetrical analysis to examine the link between 2 matrices $Y_R$ and $Y_C$. It is intended to analyze quantitative continuous data: but here, we use it to analyze count data from inflated matrices.

Here, we will analyze matrix $Y$, representing the occurrences of species in sites:

```{r, echo = FALSE, message = FALSE}
#| code-fold: true

dat <- readRDS(here("data/Barbaro2012.rds"))
Y <- dat$comm

r <- dim(Y)[1]
c <- dim(Y)[2]

plotmat(r = r, c = c)
```

## Inflate matrices

We compute the inflated tables $R$ ($n_\bar{0} \times r$) and $C$ ($n_\bar{0} \times c$) from $Y$ ($r \times c$).

```{r}
# Transform matrix to count table
Yfreq <- as.data.frame(as.table(Y))
colnames(Yfreq) <- c("row", "col", "Freq")

# Remove the cells with no observation
Yfreq0 <- Yfreq[-which(Yfreq$Freq == 0),]
Yfreq0$colind <- match(Yfreq0$col, colnames(Y)) # match index and species names

# Create indicator tables
YR <- acm.disjonctif(as.data.frame(Yfreq0$row))
colnames(YR) <- rownames(Y)
YR <- as.matrix(YR)

YC <- acm.disjonctif(as.data.frame(Yfreq0$col))
colnames(YC) <- colnames(Y)
YC <- as.matrix(YC)
```

```{r}
P <- Y/sum(Y)
Pfreq <- as.data.frame(as.table(P))
colnames(Pfreq) <- c("row", "col", "Freq")

# Remove the cells with no observation
Pfreq0 <- Pfreq[-which(Pfreq$Freq == 0),]
Pfreq0$colind <- match(Pfreq0$col, colnames(P)) # match index and species names
```

## Classical canonical correlation analysis

We perform CCorA with the R function:

```{r}
cancorRC <- cancor(YR,
                   YC,
                   xcenter = FALSE, ycenter = FALSE)

neig <- min(r-1, c-1)
```

Now, we do it by hand. First, we compute matrix 
$$K = {S_{RR}^\top}^{-1/2} S_{RC} {S_{CC}^\top}^{-1/2}$$
Where $S_{AB}$ is the variance covariance matrix of matrices $A$ and $B$.

```{r}
SRR <- t(YR) %*% YR
SRC <- t(YR) %*% YC
SCC <- t(YC) %*% YC

K <- solve(chol(t(SRR))) %*% SRC %*% solve(chol(SCC)) 

svdK <- svd(K)
```

Compare singular values to canonical correlations:

```{r}
all((svdK$d[1:neig]/cancorRC$cor[1:neig] - 1) < zero)
```

Then, we compute canonical coefficients:

```{r}
# Canonical coefficients
xcoefK <- solve(chol(SRR)) %*% svdK$u
ycoefK <- solve(chol(t(SCC))) %*% svdK$v

all(abs(abs(xcoefK[, 1:neig]/cancorRC$xcoef[, 1:neig]) - 1) < zero)
all(abs(abs(ycoefK[, 1:neig]/cancorRC$ycoef[, 1:neig]) - 1) < zero)
```

And the canonical variates:

```{r}
# Canonical variates
scoreRK <- YR %*% xcoefK
scoreCK <- YC %*% ycoefK

scoreR <- YR %*% cancorRC$xcoef
scoreC <- YC %*% cancorRC$ycoef

all(abs(abs(scoreRK[, 1:neig]/scoreR[, 1:neig]) - 1) < zero)
all(abs(abs(scoreCK[, 1:neig]/scoreC[, 1:neig]) - 1) < zero)
```


## Weighted canonical correlation analysis

```{r}
# Get weights
wt <- Pfreq0$Freq
Dw <- diag(wt)
```

First, we scale the matrices with custom weights:

```{r}
# Center tables
YR_scaled <- scalewt(YR, wt, scale = FALSE)
YC_scaled <- scalewt(YC, wt, scale = FALSE)
```

Now, we perform a weighted version with ADE4.

```{r}
cancorRC <- cancor(diag(sqrt(wt)) %*% YR_scaled, 
                   diag(sqrt(wt)) %*% YC_scaled, 
                   xcenter = FALSE, ycenter = FALSE)
```

Now, we do it by hand. First, we compute matrix $K$:

```{r}
SRR <- t(YR) %*% Dw %*% YR
SRC <- t(YR_scaled) %*% Dw %*% YC_scaled
SCC <- t(YC) %*% Dw %*% YC

K <- solve(chol(t(SRR))) %*% SRC %*% solve(chol(SCC))

svdK <- svd(K, nu = 25, nv = 20)
```

Compare singular values to canonical correlations:

```{r}
all((svdK$d[1:neig]/cancorRC$cor[1:neig] - 1) < zero)
```

Then, we compute canonical coefficients:

```{r}
# Canonical coefficients
xcoefK <- solve(chol(SRR)) %*% svdK$u
ycoefK <- solve(chol(t(SCC))) %*% svdK$v

xcoefK[1:(r-1), ]/cancorRC$xcoef
ycoefK[1:(c-1), ]/cancorRC$ycoef

all(abs(abs(xcoefK[1:(r-1), ]/cancorRC$xcoef) - 1) < zero)
all(abs(abs(ycoefK[1:(c-1), ]/cancorRC$ycoef) - 1) < zero)
```

And the canonical variates:

```{r}
# Canonical variates with ade4
scoreR <- YR_scaled[, 1:(r-1)]  %*% cancorRC$xcoef
scoreC <- YC_scaled[, 1:(c-1)]  %*% cancorRC$ycoef

# Check R C are normed at wt
res <- t(scoreR) %*% diag(wt) %*% scoreR # R^t Dw R = 1
all(abs(res - diag(1, ncol(scoreR))) < zero) 

res <- t(scoreC) %*% diag(wt) %*% scoreC # R^t Dw R = 1
all(abs(res - diag(1, ncol(scoreC))) < zero)
```


```{r}
# Canonical variates with function
scoreRK <- YR %*% xcoefK
scoreCK <- YC %*% ycoefK

# Check R C are normed at wt
res <- t(scoreRK) %*% diag(wt) %*% scoreRK # R^t Dw R = 1
all(abs(res - diag(1, ncol(scoreRK))) < zero) 

res <- t(scoreCK) %*% diag(wt) %*% scoreCK # R^t Dw R = 1
all(abs(res - diag(1, ncol(scoreCK))) < zero)
```


```{r}
all(abs(abs(scoreR[,1:neig]/scoreRK[,1:neig]) - 1) < zero)
all(abs(abs(scoreC[,1:neig]/scoreCK[,1:neig]) - 1) < zero)
```

